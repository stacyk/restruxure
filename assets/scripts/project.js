"use strict";

/*!
 * classie - class helper functions
 * from bonzo https://github.com/ded/bonzo
 * classie.has( elem, 'my-class' ) -> true/false
 * classie.add( elem, 'my-new-class' )
 * classie.remove( elem, 'my-unwanted-class' )
 * classie.toggle( elem, 'my-class' )
 */

/*jshint browser: true, strict: true, undef: true */
(function (window) {

  'use strict';

  // class helper functions from bonzo https://github.com/ded/bonzo

  function classReg(className) {
    return new RegExp("(^|\\s+)" + className + "(\\s+|$)");
  }

  // classList support for class management
  // altho to be fair, the api sucks because it won't accept multiple classes at once
  var hasClass, addClass, removeClass;

  if ('classList' in document.documentElement) {
    hasClass = function hasClass(elem, c) {
      return elem.classList.contains(c);
    };
    addClass = function addClass(elem, c) {
      elem.classList.add(c);
    };
    removeClass = function removeClass(elem, c) {
      elem.classList.remove(c);
    };
  } else {
    hasClass = function hasClass(elem, c) {
      return classReg(c).test(elem.className);
    };
    addClass = function addClass(elem, c) {
      if (!hasClass(elem, c)) {
        elem.className = elem.className + ' ' + c;
      }
    };
    removeClass = function removeClass(elem, c) {
      elem.className = elem.className.replace(classReg(c), ' ');
    };
  }

  function toggleClass(elem, c) {
    var fn = hasClass(elem, c) ? removeClass : addClass;
    fn(elem, c);
  }

  window.classie = {
    // full names
    hasClass: hasClass,
    addClass: addClass,
    removeClass: removeClass,
    toggleClass: toggleClass,
    // short names
    has: hasClass,
    add: addClass,
    remove: removeClass,
    toggle: toggleClass
  };
})(window);
'use strict';

/**
 * File js-enabled.js
 *
 * If Javascript is enabled, replace the <body> class "no-js".
 */
document.body.className = document.body.className.replace('no-js', 'js');
'use strict';

/**
 * File modal.js
 *
 * Deal with multiple modals and their media.
 */
window.wdsModal = {};

(function (window, $, app) {

	var $modalToggle;
	var $focusableChildren;

	// Constructor.
	app.init = function () {
		app.cache();

		if (app.meetsRequirements()) {
			app.bindEvents();
		}
	};

	// Cache all the things.
	app.cache = function () {
		app.$c = {
			'body': $('body')
		};
	};

	// Do we meet the requirements?
	app.meetsRequirements = function () {
		return $('.modal-trigger').length;
	};

	// Combine all events.
	app.bindEvents = function () {
		// Trigger a modal to open.
		app.$c.body.on('click touchstart', '.modal-trigger', app.openModal);

		// Trigger the close button to close the modal.
		app.$c.body.on('click touchstart', '.close', app.closeModal);

		// Allow the user to close the modal by hitting the esc key.
		app.$c.body.on('keydown', app.escKeyClose);

		// Allow the user to close the modal by clicking outside of the modal.
		app.$c.body.on('click touchstart', 'div.modal-open', app.closeModalByClick);

		// Listen to tabs, trap keyboard if we need to
		app.$c.body.on('keydown', app.trapKeyboardMaybe);
	};

	// Open the modal.
	app.openModal = function () {
		// Store the modal toggle element
		$modalToggle = $(this);

		// Figure out which modal we're opening and store the object.
		var $modal = $($(this).data('target'));

		// Display the modal.
		$modal.addClass('modal-open');

		// Add body class.
		app.$c.body.addClass('modal-open');

		// Find the focusable children of the modal.
		// This list may be incomplete, really wish jQuery had the :focusable pseudo like jQuery UI does.
		// For more about :input see: https://api.jquery.com/input-selector/
		$focusableChildren = $modal.find('a, :input, [tabindex]');

		// Ideally, there is always one (the close button), but you never know.
		if ($focusableChildren.length > 0) {
			// Shift focus to the first focusable element.
			$focusableChildren[0].focus();
		}
	};

	// Close the modal.
	app.closeModal = function () {
		// Figure the opened modal we're closing and store the object.
		var $modal = $($('div.modal-open .close').data('target'));

		// Find the iframe in the $modal object.
		var $iframe = $modal.find('iframe');

		// Only do this if there are any iframes.
		if ($iframe.length) {
			// Get the iframe src URL.
			var url = $iframe.attr('src');

			// Removing/Readding the URL will effectively break the YouTube API.
			// So let's not do that when the iframe URL contains the enablejsapi parameter.
			if (!url.includes('enablejsapi=1')) {
				// Remove the source URL, then add it back, so the video can be played again later.
				$iframe.attr('src', '').attr('src', url);
			} else {
				// Use the YouTube API to stop the video.
				player.stopVideo();
			}
		}

		// Finally, hide the modal.
		$modal.removeClass('modal-open');

		// Remove the body class.
		app.$c.body.removeClass('modal-open');

		// Revert focus back to toggle element
		$modalToggle.focus();
	};

	// Close if "esc" key is pressed.
	app.escKeyClose = function (event) {
		if (27 === event.keyCode) {
			app.closeModal();
		}
	};

	// Close if the user clicks outside of the modal
	app.closeModalByClick = function (event) {
		// If the parent container is NOT the modal dialog container, close the modal
		if (!$(event.target).parents('div').hasClass('modal-dialog')) {
			app.closeModal();
		}
	};

	// Trap the keyboard into a modal when one is active.
	app.trapKeyboardMaybe = function (event) {

		// We only need to do stuff when the modal is open and tab is pressed.
		if (9 === event.which && $('.modal-open').length > 0) {
			var $focused = $(':focus');
			var focusIndex = $focusableChildren.index($focused);

			if (0 === focusIndex && event.shiftKey) {
				// If this is the first focusable element, and shift is held when pressing tab, go back to last focusable element.
				$focusableChildren[$focusableChildren.length - 1].focus();
				event.preventDefault();
			} else if (!event.shiftKey && focusIndex === $focusableChildren.length - 1) {
				// If this is the last focusable element, and shift is not held, go back to the first focusable element.
				$focusableChildren[0].focus();
				event.preventDefault();
			}
		}
	};

	// Engage!
	$(app.init);
})(window, jQuery, window.wdsModal);

// Load the yt iframe api js file from youtube.
// NOTE THE IFRAME URL MUST HAVE 'enablejsapi=1' appended to it.
// example: src="http://www.youtube.com/embed/M7lc1UVf-VE?enablejsapi=1"
// It also _must_ have an ID attribute.
var tag = document.createElement('script');
tag.id = 'iframe-yt';
tag.src = 'https://www.youtube.com/iframe_api';
var firstScriptTag = document.getElementsByTagName('script')[0];
firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

// This var and function have to be available globally due to yt js iframe api.
var player;
function onYouTubeIframeAPIReady() {
	var modal = jQuery('div.modal');
	var iframeid = modal.find('iframe').attr('id');

	player = new YT.Player(iframeid, {
		events: {
			'onReady': onPlayerReady,
			'onStateChange': onPlayerStateChange
		}
	});
}

function onPlayerReady(event) {}

function onPlayerStateChange(event) {
	// Set focus to the first focusable element inside of the modal the player is in.
	jQuery(event.target.a).parents('.modal').find('a, :input, [tabindex]').first().focus();
}
'use strict';

/**
 * File skip-link-focus-fix.js.
 *
 * Helps with accessibility for keyboard only users.
 *
 * Learn more: https://git.io/vWdr2
 */
(function () {
	var isWebkit = navigator.userAgent.toLowerCase().indexOf('webkit') > -1,
	    isOpera = navigator.userAgent.toLowerCase().indexOf('opera') > -1,
	    isIe = navigator.userAgent.toLowerCase().indexOf('msie') > -1;

	if ((isWebkit || isOpera || isIe) && document.getElementById && window.addEventListener) {
		window.addEventListener('hashchange', function () {
			var id = location.hash.substring(1),
			    element;

			if (!/^[A-z0-9_-]+$/.test(id)) {
				return;
			}

			element = document.getElementById(id);

			if (element) {
				if (!/^(?:a|select|input|button|textarea)$/i.test(element.tagName)) {
					element.tabIndex = -1;
				}

				element.focus();
			}
		}, false);
	}
})();
'use strict';

/**
 * File sidebar.js
 *
 * Toggle Sidebar
 */

var sidebarRight = document.getElementById('sidebar-sliding-panel'),
    showRightPush = document.getElementById('sidebar-toggle-button'),
    body = document.body;

jQuery(document).ready(function ($) {
	/* Check width on page load*/
	if ($(window).width() > 680) {
		classie.remove(body, 'sidebar-push-toleft');

		showRightPush.onclick = function () {
			classie.toggle(body, 'sidebar-push-toleft');
			classie.toggle(sidebarRight, 'open');
			classie.toggle(showRightPush, 'open');
		};
	} else {
		classie.remove(body, 'sidebar-push-toleft');

		showRightPush.onclick = function () {
			classie.toggle(body, 'sidebar-push-toleft');
			classie.toggle(sidebarRight, 'open');
			classie.toggle(showRightPush, 'open');
		};
	}
});
'use strict';

/**
 * File window-ready.js
 *
 * Add a "ready" class to <body> when window is ready.
 */
window.wdsWindowReady = {};
(function (window, $, app) {
	// Constructor.
	app.init = function () {
		app.cache();
		app.bindEvents();
	};

	// Cache document elements.
	app.cache = function () {
		app.$c = {
			'window': $(window),
			'body': $(document.body)
		};
	};

	// Combine all events.
	app.bindEvents = function () {
		app.$c.window.load(app.addBodyClass);
	};

	// Add a class to <body>.
	app.addBodyClass = function () {
		app.$c.body.addClass('ready');
	};

	// Engage!
	$(app.init);
})(window, jQuery, window.wdsWindowReady);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNsYXNzaWUuanMiLCJqcy1lbmFibGVkLmpzIiwibW9kYWwuanMiLCJza2lwLWxpbmstZm9jdXMtZml4LmpzIiwidG9nZ2xlLmpzIiwid2luZG93LXJlYWR5LmpzIl0sIm5hbWVzIjpbIndpbmRvdyIsImNsYXNzUmVnIiwiY2xhc3NOYW1lIiwiUmVnRXhwIiwiaGFzQ2xhc3MiLCJhZGRDbGFzcyIsInJlbW92ZUNsYXNzIiwiZG9jdW1lbnQiLCJkb2N1bWVudEVsZW1lbnQiLCJlbGVtIiwiYyIsImNsYXNzTGlzdCIsImNvbnRhaW5zIiwiYWRkIiwicmVtb3ZlIiwidGVzdCIsInJlcGxhY2UiLCJ0b2dnbGVDbGFzcyIsImZuIiwiY2xhc3NpZSIsImhhcyIsInRvZ2dsZSIsImJvZHkiLCJ3ZHNNb2RhbCIsIiQiLCJhcHAiLCIkbW9kYWxUb2dnbGUiLCIkZm9jdXNhYmxlQ2hpbGRyZW4iLCJpbml0IiwiY2FjaGUiLCJtZWV0c1JlcXVpcmVtZW50cyIsImJpbmRFdmVudHMiLCIkYyIsImxlbmd0aCIsIm9uIiwib3Blbk1vZGFsIiwiY2xvc2VNb2RhbCIsImVzY0tleUNsb3NlIiwiY2xvc2VNb2RhbEJ5Q2xpY2siLCJ0cmFwS2V5Ym9hcmRNYXliZSIsIiRtb2RhbCIsImRhdGEiLCJmaW5kIiwiZm9jdXMiLCIkaWZyYW1lIiwidXJsIiwiYXR0ciIsImluY2x1ZGVzIiwicGxheWVyIiwic3RvcFZpZGVvIiwiZXZlbnQiLCJrZXlDb2RlIiwidGFyZ2V0IiwicGFyZW50cyIsIndoaWNoIiwiJGZvY3VzZWQiLCJmb2N1c0luZGV4IiwiaW5kZXgiLCJzaGlmdEtleSIsInByZXZlbnREZWZhdWx0IiwialF1ZXJ5IiwidGFnIiwiY3JlYXRlRWxlbWVudCIsImlkIiwic3JjIiwiZmlyc3RTY3JpcHRUYWciLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInBhcmVudE5vZGUiLCJpbnNlcnRCZWZvcmUiLCJvbllvdVR1YmVJZnJhbWVBUElSZWFkeSIsIm1vZGFsIiwiaWZyYW1laWQiLCJZVCIsIlBsYXllciIsImV2ZW50cyIsIm9uUGxheWVyUmVhZHkiLCJvblBsYXllclN0YXRlQ2hhbmdlIiwiYSIsImZpcnN0IiwiaXNXZWJraXQiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJ0b0xvd2VyQ2FzZSIsImluZGV4T2YiLCJpc09wZXJhIiwiaXNJZSIsImdldEVsZW1lbnRCeUlkIiwiYWRkRXZlbnRMaXN0ZW5lciIsImxvY2F0aW9uIiwiaGFzaCIsInN1YnN0cmluZyIsImVsZW1lbnQiLCJ0YWdOYW1lIiwidGFiSW5kZXgiLCJzaWRlYmFyUmlnaHQiLCJzaG93UmlnaHRQdXNoIiwicmVhZHkiLCJ3aWR0aCIsIm9uY2xpY2siLCJ3ZHNXaW5kb3dSZWFkeSIsImxvYWQiLCJhZGRCb2R5Q2xhc3MiXSwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7Ozs7OztBQVNBO0FBQ0EsQ0FBRSxVQUFVQSxNQUFWLEVBQW1COztBQUVyQjs7QUFFQTs7QUFFQSxXQUFTQyxRQUFULENBQW1CQyxTQUFuQixFQUErQjtBQUM3QixXQUFPLElBQUlDLE1BQUosQ0FBVyxhQUFhRCxTQUFiLEdBQXlCLFVBQXBDLENBQVA7QUFDRDs7QUFFRDtBQUNBO0FBQ0EsTUFBSUUsUUFBSixFQUFjQyxRQUFkLEVBQXdCQyxXQUF4Qjs7QUFFQSxNQUFLLGVBQWVDLFNBQVNDLGVBQTdCLEVBQStDO0FBQzdDSixlQUFXLGtCQUFVSyxJQUFWLEVBQWdCQyxDQUFoQixFQUFvQjtBQUM3QixhQUFPRCxLQUFLRSxTQUFMLENBQWVDLFFBQWYsQ0FBeUJGLENBQXpCLENBQVA7QUFDRCxLQUZEO0FBR0FMLGVBQVcsa0JBQVVJLElBQVYsRUFBZ0JDLENBQWhCLEVBQW9CO0FBQzdCRCxXQUFLRSxTQUFMLENBQWVFLEdBQWYsQ0FBb0JILENBQXBCO0FBQ0QsS0FGRDtBQUdBSixrQkFBYyxxQkFBVUcsSUFBVixFQUFnQkMsQ0FBaEIsRUFBb0I7QUFDaENELFdBQUtFLFNBQUwsQ0FBZUcsTUFBZixDQUF1QkosQ0FBdkI7QUFDRCxLQUZEO0FBR0QsR0FW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QUk0RSxZQUF4QjtBQUNBLEVBRkQ7O0FBSUE7QUFDQTVFLEtBQUk0RSxZQUFKLEdBQW1CLFlBQVk7QUFDOUI1RSxNQUFJTyxFQUFKLENBQU9WLElBQVAsQ0FBWWpCLFFBQVosQ0FBc0IsT0FBdEI7QUFDQSxFQUZEOztBQUlBO0FBQ0FtQixHQUFHQyxJQUFJRyxJQUFQO0FBQ0EsQ0EzQkQsRUEyQks1QixNQTNCTCxFQTJCYTRELE1BM0JiLEVBMkJxQjVELE9BQU9tRyxjQTNCNUIiLCJmaWxlIjoicHJvamVjdC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogY2xhc3NpZSAtIGNsYXNzIGhlbHBlciBmdW5jdGlvbnNcbiAqIGZyb20gYm9uem8gaHR0cHM6Ly9naXRodWIuY29tL2RlZC9ib256b1xuICogY2xhc3NpZS5oYXMoIGVsZW0sICdteS1jbGFzcycgKSAtPiB0cnVlL2ZhbHNlXG4gKiBjbGFzc2llLmFkZCggZWxlbSwgJ215LW5ldy1jbGFzcycgKVxuICogY2xhc3NpZS5yZW1vdmUoIGVsZW0sICdteS11bndhbnRlZC1jbGFzcycgKVxuICogY2xhc3NpZS50b2dnbGUoIGVsZW0sICdteS1jbGFzcycgKVxuICovXG5cbi8qanNoaW50IGJyb3dzZXI6IHRydWUsIHN0cmljdDogdHJ1ZSwgdW5kZWY6IHRydWUgKi9cbiggZnVuY3Rpb24oIHdpbmRvdyApIHtcblxuJ3VzZSBzdHJpY3QnO1xuXG4vLyBjbGFzcyBoZWxwZXIgZnVuY3Rpb25zIGZyb20gYm9uem8gaHR0cHM6Ly9naXRodWIuY29tL2RlZC9ib256b1xuXG5mdW5jdGlvbiBjbGFzc1JlZyggY2xhc3NOYW1lICkge1xuICByZXR1cm4gbmV3IFJlZ0V4cChcIihefFxcXFxzKylcIiArIGNsYXNzTmFtZSArIFwiKFxcXFxzK3wkKVwiKTtcbn1cblxuLy8gY2xhc3NMaXN0IHN1cHBvcnQgZm9yIGNsYXNzIG1hbmFnZW1lbnRcbi8vIGFsdGhvIHRvIGJlIGZhaXIsIHRoZSBhcGkgc3Vja3MgYmVjYXVzZSBpdCB3b24ndCBhY2NlcHQgbXVsdGlwbGUgY2xhc3NlcyBhdCBvbmNlXG52YXIgaGFzQ2xhc3MsIGFkZENsYXNzLCByZW1vdmVDbGFzcztcblxuaWYgKCAnY2xhc3NMaXN0JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgKSB7XG4gIGhhc0NsYXNzID0gZnVuY3Rpb24oIGVsZW0sIGMgKSB7XG4gICAgcmV0dXJuIGVsZW0uY2xhc3NMaXN0LmNvbnRhaW5zKCBjICk7XG4gIH07XG4gIGFkZENsYXNzID0gZnVuY3Rpb24oIGVsZW0sIGMgKSB7XG4gICAgZWxlbS5jbGFzc0xpc3QuYWRkKCBjICk7XG4gIH07XG4gIHJlbW92ZUNsYXNzID0gZnVuY3Rpb24oIGVsZW0sIGMgKSB7XG4gICAgZWxlbS5jbGFzc0xpc3QucmVtb3ZlKCBjICk7XG4gIH07XG59XG5lbHNlIHtcbiAgaGFzQ2xhc3MgPSBmdW5jdGlvbiggZWxlbSwgYyApIHtcbiAgICByZXR1cm4gY2xhc3NSZWcoIGMgKS50ZXN0KCBlbGVtLmNsYXNzTmFtZSApO1xuICB9O1xuICBhZGRDbGFzcyA9IGZ1bmN0aW9uKCBlbGVtLCBjICkge1xuICAgIGlmICggIWhhc0NsYXNzKCBlbGVtLCBjICkgKSB7XG4gICAgICBlbGVtLmNsYXNzTmFtZSA9IGVsZW0uY2xhc3NOYW1lICsgJyAnICsgYztcbiAgICB9XG4gIH07XG4gIHJlbW92ZUNsYXNzID0gZnVuY3Rpb24oIGVsZW0sIGMgKSB7XG4gICAgZWxlbS5jbGFzc05hbWUgPSBlbGVtLmNsYXNzTmFtZS5yZXBsYWNlKCBjbGFzc1JlZyggYyApLCAnICcgKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdG9nZ2xlQ2xhc3MoIGVsZW0sIGMgKSB7XG4gIHZhciBmbiA9IGhhc0NsYXNzKCBlbGVtLCBjICkgPyByZW1vdmVDbGFzcyA6IGFkZENsYXNzO1xuICBmbiggZWxlbSwgYyApO1xufVxuXG53aW5kb3cuY2xhc3NpZSA9IHtcbiAgLy8gZnVsbCBuYW1lc1xuICBoYXNDbGFzczogaGFzQ2xhc3MsXG4gIGFkZENsYXNzOiBhZGRDbGFzcyxcbiAgcmVtb3ZlQ2xhc3M6IHJlbW92ZUNsYXNzLFxuICB0b2dnbGVDbGFzczogdG9nZ2xlQ2xhc3MsXG4gIC8vIHNob3J0IG5hbWVzXG4gIGhhczogaGFzQ2xhc3MsXG4gIGFkZDogYWRkQ2xhc3MsXG4gIHJlbW92ZTogcmVtb3ZlQ2xhc3MsXG4gIHRvZ2dsZTogdG9nZ2xlQ2xhc3Ncbn07XG5cbn0pKCB3aW5kb3cgKTtcbiIsIi8qKlxuICogRmlsZSBqcy1lbmFibGVkLmpzXG4gKlxuICogSWYgSmF2YXNjcmlwdCBpcyBlbmFibGVkLCByZXBsYWNlIHRoZSA8Ym9keT4gY2xhc3MgXCJuby1qc1wiLlxuICovXG5kb2N1bWVudC5ib2R5LmNsYXNzTmFtZSA9IGRvY3VtZW50LmJvZHkuY2xhc3NOYW1lLnJlcGxhY2UoICduby1qcycsICdqcycgKTtcbiIsIi8qKlxuICogRmlsZSBtb2RhbC5qc1xuICpcbiAqIERlYWwgd2l0aCBtdWx0aXBsZSBtb2RhbHMgYW5kIHRoZWlyIG1lZGlhLlxuICovXG53aW5kb3cud2RzTW9kYWwgPSB7fTtcblxuKCBmdW5jdGlvbiAoIHdpbmRvdywgJCwgYXBwICkge1xuXG5cdHZhciAkbW9kYWxUb2dnbGU7XG5cdHZhciAkZm9jdXNhYmxlQ2hpbGRyZW47XG5cblx0Ly8gQ29uc3RydWN0b3IuXG5cdGFwcC5pbml0ID0gZnVuY3Rpb24gKCkge1xuXHRcdGFwcC5jYWNoZSgpO1xuXG5cdFx0aWYgKCBhcHAubWVldHNSZXF1aXJlbWVudHMoKSApIHtcblx0XHRcdGFwcC5iaW5kRXZlbnRzKCk7XG5cdFx0fVxuXHR9O1xuXG5cdC8vIENhY2hlIGFsbCB0aGUgdGhpbmdzLlxuXHRhcHAuY2FjaGUgPSBmdW5jdGlvbiAoKSB7XG5cdFx0YXBwLiRjID0ge1xuXHRcdFx0J2JvZHknOiAkKCAnYm9keScgKVxuXHRcdH07XG5cdH07XG5cblx0Ly8gRG8gd2UgbWVldCB0aGUgcmVxdWlyZW1lbnRzP1xuXHRhcHAubWVldHNSZXF1aXJlbWVudHMgPSBmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuICQoICcubW9kYWwtdHJpZ2dlcicgKS5sZW5ndGg7XG5cdH07XG5cblx0Ly8gQ29tYmluZSBhbGwgZXZlbnRzLlxuXHRhcHAuYmluZEV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcblx0XHQvLyBUcmlnZ2VyIGEgbW9kYWwgdG8gb3Blbi5cblx0XHRhcHAuJGMuYm9keS5vbiggJ2NsaWNrIHRvdWNoc3RhcnQnLCAnLm1vZGFsLXRyaWdnZXInLCBhcHAub3Blbk1vZGFsICk7XG5cblx0XHQvLyBUcmlnZ2VyIHRoZSBjbG9zZSBidXR0b24gdG8gY2xvc2UgdGhlIG1vZGFsLlxuXHRcdGFwcC4kYy5ib2R5Lm9uKCAnY2xpY2sgdG91Y2hzdGFydCcsICcuY2xvc2UnLCBhcHAuY2xvc2VNb2RhbCApO1xuXG5cdFx0Ly8gQWxsb3cgdGhlIHVzZXIgdG8gY2xvc2UgdGhlIG1vZGFsIGJ5IGhpdHRpbmcgdGhlIGVzYyBrZXkuXG5cdFx0YXBwLiRjLmJvZHkub24oICdrZXlkb3duJywgYXBwLmVzY0tleUNsb3NlICk7XG5cblx0XHQvLyBBbGxvdyB0aGUgdXNlciB0byBjbG9zZSB0aGUgbW9kYWwgYnkgY2xpY2tpbmcgb3V0c2lkZSBvZiB0aGUgbW9kYWwuXG5cdFx0YXBwLiRjLmJvZHkub24oICdjbGljayB0b3VjaHN0YXJ0JywgJ2Rpdi5tb2RhbC1vcGVuJywgYXBwLmNsb3NlTW9kYWxCeUNsaWNrICk7XG5cblx0XHQvLyBMaXN0ZW4gdG8gdGFicywgdHJhcCBrZXlib2FyZCBpZiB3ZSBuZWVkIHRvXG5cdFx0YXBwLiRjLmJvZHkub24oICdrZXlkb3duJywgYXBwLnRyYXBLZXlib2FyZE1heWJlICk7XG5cblx0fTtcblxuXHQvLyBPcGVuIHRoZSBtb2RhbC5cblx0YXBwLm9wZW5Nb2RhbCA9IGZ1bmN0aW9uICgpIHtcblx0XHQvLyBTdG9yZSB0aGUgbW9kYWwgdG9nZ2xlIGVsZW1lbnRcblx0XHQkbW9kYWxUb2dnbGUgPSAkKCB0aGlzICk7XG5cblx0XHQvLyBGaWd1cmUgb3V0IHdoaWNoIG1vZGFsIHdlJ3JlIG9wZW5pbmcgYW5kIHN0b3JlIHRoZSBvYmplY3QuXG5cdFx0dmFyICRtb2RhbCA9ICQoICQoIHRoaXMgKS5kYXRhKCAndGFyZ2V0JyApICk7XG5cblx0XHQvLyBEaXNwbGF5IHRoZSBtb2RhbC5cblx0XHQkbW9kYWwuYWRkQ2xhc3MoICdtb2RhbC1vcGVuJyApO1xuXG5cdFx0Ly8gQWRkIGJvZHkgY2xhc3MuXG5cdFx0YXBwLiRjLmJvZHkuYWRkQ2xhc3MoICdtb2RhbC1vcGVuJyApO1xuXG5cdFx0Ly8gRmluZCB0aGUgZm9jdXNhYmxlIGNoaWxkcmVuIG9mIHRoZSBtb2RhbC5cblx0XHQvLyBUaGlzIGxpc3QgbWF5IGJlIGluY29tcGxldGUsIHJlYWxseSB3aXNoIGpRdWVyeSBoYWQgdGhlIDpmb2N1c2FibGUgcHNldWRvIGxpa2UgalF1ZXJ5IFVJIGRvZXMuXG5cdFx0Ly8gRm9yIG1vcmUgYWJvdXQgOmlucHV0IHNlZTogaHR0cHM6Ly9hcGkuanF1ZXJ5LmNvbS9pbnB1dC1zZWxlY3Rvci9cblx0XHQkZm9jdXNhYmxlQ2hpbGRyZW4gPSAkbW9kYWwuZmluZCgnYSwgOmlucHV0LCBbdGFiaW5kZXhdJyk7XG5cblx0XHQvLyBJZGVhbGx5LCB0aGVyZSBpcyBhbHdheXMgb25lICh0aGUgY2xvc2UgYnV0dG9uKSwgYnV0IHlvdSBuZXZlciBrbm93LlxuXHRcdGlmICggJGZvY3VzYWJsZUNoaWxkcmVuLmxlbmd0aCA+IDAgKSB7XG5cdFx0XHQvLyBTaGlmdCBmb2N1cyB0byB0aGUgZmlyc3QgZm9jdXNhYmxlIGVsZW1lbnQuXG5cdFx0XHQkZm9jdXNhYmxlQ2hpbGRyZW5bMF0uZm9jdXMoKTtcblx0XHR9XG5cblx0fTtcblxuXHQvLyBDbG9zZSB0aGUgbW9kYWwuXG5cdGFwcC5jbG9zZU1vZGFsID0gZnVuY3Rpb24gKCkge1xuXHRcdC8vIEZpZ3VyZSB0aGUgb3BlbmVkIG1vZGFsIHdlJ3JlIGNsb3NpbmcgYW5kIHN0b3JlIHRoZSBvYmplY3QuXG5cdFx0dmFyICRtb2RhbCA9ICQoICQoICdkaXYubW9kYWwtb3BlbiAuY2xvc2UnICkuZGF0YSggJ3RhcmdldCcgKSApO1xuXG5cdFx0Ly8gRmluZCB0aGUgaWZyYW1lIGluIHRoZSAkbW9kYWwgb2JqZWN0LlxuXHRcdHZhciAkaWZyYW1lID0gJG1vZGFsLmZpbmQoICdpZnJhbWUnICk7XG5cblx0XHQvLyBPbmx5IGRvIHRoaXMgaWYgdGhlcmUgYXJlIGFueSBpZnJhbWVzLlxuXHRcdGlmICggJGlmcmFtZS5sZW5ndGggKSB7XG5cdFx0XHQvLyBHZXQgdGhlIGlmcmFtZSBzcmMgVVJMLlxuXHRcdFx0dmFyIHVybCA9ICRpZnJhbWUuYXR0ciggJ3NyYycgKTtcblxuXHRcdFx0Ly8gUmVtb3ZpbmcvUmVhZGRpbmcgdGhlIFVSTCB3aWxsIGVmZmVjdGl2ZWx5IGJyZWFrIHRoZSBZb3VUdWJlIEFQSS5cblx0XHRcdC8vIFNvIGxldCdzIG5vdCBkbyB0aGF0IHdoZW4gdGhlIGlmcmFtZSBVUkwgY29udGFpbnMgdGhlIGVuYWJsZWpzYXBpIHBhcmFtZXRlci5cblx0XHRcdGlmICggISB1cmwuaW5jbHVkZXMoICdlbmFibGVqc2FwaT0xJyApICkge1xuXHRcdFx0XHQvLyBSZW1vdmUgdGhlIHNvdXJjZSBVUkwsIHRoZW4gYWRkIGl0IGJhY2ssIHNvIHRoZSB2aWRlbyBjYW4gYmUgcGxheWVkIGFnYWluIGxhdGVyLlxuXHRcdFx0XHQkaWZyYW1lLmF0dHIoICdzcmMnLCAnJyApLmF0dHIoICdzcmMnLCB1cmwgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdC8vIFVzZSB0aGUgWW91VHViZSBBUEkgdG8gc3RvcCB0aGUgdmlkZW8uXG5cdFx0XHRcdHBsYXllci5zdG9wVmlkZW8oKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBGaW5hbGx5LCBoaWRlIHRoZSBtb2RhbC5cblx0XHQkbW9kYWwucmVtb3ZlQ2xhc3MoICdtb2RhbC1vcGVuJyApO1xuXG5cdFx0Ly8gUmVtb3ZlIHRoZSBib2R5IGNsYXNzLlxuXHRcdGFwcC4kYy5ib2R5LnJlbW92ZUNsYXNzKCAnbW9kYWwtb3BlbicgKTtcblxuXHRcdC8vIFJldmVydCBmb2N1cyBiYWNrIHRvIHRvZ2dsZSBlbGVtZW50XG5cdFx0JG1vZGFsVG9nZ2xlLmZvY3VzKCk7XG5cblx0fTtcblxuXHQvLyBDbG9zZSBpZiBcImVzY1wiIGtleSBpcyBwcmVzc2VkLlxuXHRhcHAuZXNjS2V5Q2xvc2UgPSBmdW5jdGlvbiAoIGV2ZW50ICkge1xuXHRcdGlmICggMjcgPT09IGV2ZW50LmtleUNvZGUgKSB7XG5cdFx0XHRhcHAuY2xvc2VNb2RhbCgpO1xuXHRcdH1cblx0fTtcblxuXHQvLyBDbG9zZSBpZiB0aGUgdXNlciBjbGlja3Mgb3V0c2lkZSBvZiB0aGUgbW9kYWxcblx0YXBwLmNsb3NlTW9kYWxCeUNsaWNrID0gZnVuY3Rpb24gKCBldmVudCApIHtcblx0XHQvLyBJZiB0aGUgcGFyZW50IGNvbnRhaW5lciBpcyBOT1QgdGhlIG1vZGFsIGRpYWxvZyBjb250YWluZXIsIGNsb3NlIHRoZSBtb2RhbFxuXHRcdGlmICggISQoIGV2ZW50LnRhcmdldCApLnBhcmVudHMoICdkaXYnICkuaGFzQ2xhc3MoICdtb2RhbC1kaWFsb2cnICkgKSB7XG5cdFx0XHRhcHAuY2xvc2VNb2RhbCgpO1xuXHRcdH1cblx0fTtcblxuXHQvLyBUcmFwIHRoZSBrZXlib2FyZCBpbnRvIGEgbW9kYWwgd2hlbiBvbmUgaXMgYWN0aXZlLlxuXHRhcHAudHJhcEtleWJvYXJkTWF5YmUgPSBmdW5jdGlvbiAoIGV2ZW50ICkge1xuXG5cdFx0Ly8gV2Ugb25seSBuZWVkIHRvIGRvIHN0dWZmIHdoZW4gdGhlIG1vZGFsIGlzIG9wZW4gYW5kIHRhYiBpcyBwcmVzc2VkLlxuXHRcdGlmICggOSA9PT0gZXZlbnQud2hpY2ggJiYgJCggJy5tb2RhbC1vcGVuJyApLmxlbmd0aCA+IDAgKSB7XG5cdFx0XHR2YXIgJGZvY3VzZWQgPSAkKCAnOmZvY3VzJyApO1xuXHRcdFx0dmFyIGZvY3VzSW5kZXggPSAkZm9jdXNhYmxlQ2hpbGRyZW4uaW5kZXgoICRmb2N1c2VkICk7XG5cblx0XHRcdGlmICggMCA9PT0gZm9jdXNJbmRleCAmJiBldmVudC5zaGlmdEtleSApIHtcblx0XHRcdFx0Ly8gSWYgdGhpcyBpcyB0aGUgZmlyc3QgZm9jdXNhYmxlIGVsZW1lbnQsIGFuZCBzaGlmdCBpcyBoZWxkIHdoZW4gcHJlc3NpbmcgdGFiLCBnbyBiYWNrIHRvIGxhc3QgZm9jdXNhYmxlIGVsZW1lbnQuXG5cdFx0XHRcdCRmb2N1c2FibGVDaGlsZHJlblsgJGZvY3VzYWJsZUNoaWxkcmVuLmxlbmd0aCAtIDEgXS5mb2N1cygpO1xuXHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0fSBlbHNlIGlmICggISBldmVudC5zaGlmdEtleSAmJiBmb2N1c0luZGV4ID09PSAkZm9jdXNhYmxlQ2hpbGRyZW4ubGVuZ3RoIC0gMSApIHtcblx0XHRcdFx0Ly8gSWYgdGhpcyBpcyB0aGUgbGFzdCBmb2N1c2FibGUgZWxlbWVudCwgYW5kIHNoaWZ0IGlzIG5vdCBoZWxkLCBnbyBiYWNrIHRvIHRoZSBmaXJzdCBmb2N1c2FibGUgZWxlbWVudC5cblx0XHRcdFx0JGZvY3VzYWJsZUNoaWxkcmVuWzBdLmZvY3VzKCk7XG5cdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gRW5nYWdlIVxuXHQkKCBhcHAuaW5pdCApO1xufSApKCB3aW5kb3csIGpRdWVyeSwgd2luZG93Lndkc01vZGFsICk7XG5cbi8vIExvYWQgdGhlIHl0IGlmcmFtZSBhcGkganMgZmlsZSBmcm9tIHlvdXR1YmUuXG4vLyBOT1RFIFRIRSBJRlJBTUUgVVJMIE1VU1QgSEFWRSAnZW5hYmxlanNhcGk9MScgYXBwZW5kZWQgdG8gaXQuXG4vLyBleGFtcGxlOiBzcmM9XCJodHRwOi8vd3d3LnlvdXR1YmUuY29tL2VtYmVkL003bGMxVVZmLVZFP2VuYWJsZWpzYXBpPTFcIlxuLy8gSXQgYWxzbyBfbXVzdF8gaGF2ZSBhbiBJRCBhdHRyaWJ1dGUuXG52YXIgdGFnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG50YWcuaWQgPSAnaWZyYW1lLXl0JztcbnRhZy5zcmMgPSAnaHR0cHM6Ly93d3cueW91dHViZS5jb20vaWZyYW1lX2FwaSc7XG52YXIgZmlyc3RTY3JpcHRUYWcgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc2NyaXB0JylbMF07XG5maXJzdFNjcmlwdFRhZy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0YWcsIGZpcnN0U2NyaXB0VGFnKTtcblxuLy8gVGhpcyB2YXIgYW5kIGZ1bmN0aW9uIGhhdmUgdG8gYmUgYXZhaWxhYmxlIGdsb2JhbGx5IGR1ZSB0byB5dCBqcyBpZnJhbWUgYXBpLlxudmFyIHBsYXllcjtcbmZ1bmN0aW9uIG9uWW91VHViZUlmcmFtZUFQSVJlYWR5KCkge1xuICB2YXIgbW9kYWwgPSBqUXVlcnkoJ2Rpdi5tb2RhbCcpO1xuXHR2YXIgaWZyYW1laWQgPSBtb2RhbC5maW5kKCdpZnJhbWUnKS5hdHRyKCdpZCcpO1xuXG5cdHBsYXllciA9IG5ldyBZVC5QbGF5ZXIoIGlmcmFtZWlkICwge1xuXHRcdGV2ZW50czoge1xuXHRcdFx0J29uUmVhZHknOiBvblBsYXllclJlYWR5LFxuXHRcdFx0J29uU3RhdGVDaGFuZ2UnOiBvblBsYXllclN0YXRlQ2hhbmdlXG5cdFx0fVxuXHR9KTtcbn1cblxuZnVuY3Rpb24gb25QbGF5ZXJSZWFkeShldmVudCkge1xuXG59XG5cbmZ1bmN0aW9uIG9uUGxheWVyU3RhdGVDaGFuZ2UoIGV2ZW50ICkge1xuXHQvLyBTZXQgZm9jdXMgdG8gdGhlIGZpcnN0IGZvY3VzYWJsZSBlbGVtZW50IGluc2lkZSBvZiB0aGUgbW9kYWwgdGhlIHBsYXllciBpcyBpbi5cblx0alF1ZXJ5KCBldmVudC50YXJnZXQuYSApLnBhcmVudHMoICcubW9kYWwnICkuZmluZCgnYSwgOmlucHV0LCBbdGFiaW5kZXhdJykuZmlyc3QoKS5mb2N1cygpO1xufVxuIiwiLyoqXG4gKiBGaWxlIHNraXAtbGluay1mb2N1cy1maXguanMuXG4gKlxuICogSGVscHMgd2l0aCBhY2Nlc3NpYmlsaXR5IGZvciBrZXlib2FyZCBvbmx5IHVzZXJzLlxuICpcbiAqIExlYXJuIG1vcmU6IGh0dHBzOi8vZ2l0LmlvL3ZXZHIyXG4gKi9cbiggZnVuY3Rpb24gKCkge1xuXHR2YXIgaXNXZWJraXQgPSBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkuaW5kZXhPZiggJ3dlYmtpdCcgKSA+IC0xLFxuXHRcdGlzT3BlcmEgPSBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkuaW5kZXhPZiggJ29wZXJhJyApID4gLTEsXG5cdFx0aXNJZSA9IG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5pbmRleE9mKCAnbXNpZScgKSA+IC0xO1xuXG5cdGlmICggKCBpc1dlYmtpdCB8fCBpc09wZXJhIHx8IGlzSWUgKSAmJiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCAmJiB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciApIHtcblx0XHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggJ2hhc2hjaGFuZ2UnLCBmdW5jdGlvbiAoKSB7XG5cdFx0XHR2YXIgaWQgPSBsb2NhdGlvbi5oYXNoLnN1YnN0cmluZyggMSApLFxuXHRcdFx0XHRlbGVtZW50O1xuXG5cdFx0XHRpZiAoICEoIC9eW0EtejAtOV8tXSskLyApLnRlc3QoIGlkICkgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0ZWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCBpZCApO1xuXG5cdFx0XHRpZiAoIGVsZW1lbnQgKSB7XG5cdFx0XHRcdGlmICggISggL14oPzphfHNlbGVjdHxpbnB1dHxidXR0b258dGV4dGFyZWEpJC9pICkudGVzdCggZWxlbWVudC50YWdOYW1lICkgKSB7XG5cdFx0XHRcdFx0ZWxlbWVudC50YWJJbmRleCA9IC0xO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZWxlbWVudC5mb2N1cygpO1xuXHRcdFx0fVxuXHRcdH0sIGZhbHNlICk7XG5cdH1cbn0gKSgpO1xuIiwiLyoqXG4gKiBGaWxlIHNpZGViYXIuanNcbiAqXG4gKiBUb2dnbGUgU2lkZWJhclxuICovXG5cbnZhciBzaWRlYmFyUmlnaHQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCggJ3NpZGViYXItc2xpZGluZy1wYW5lbCcgKSxcblx0c2hvd1JpZ2h0UHVzaCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCAnc2lkZWJhci10b2dnbGUtYnV0dG9uJyApLFxuXHRib2R5ID0gZG9jdW1lbnQuYm9keTtcblxualF1ZXJ5KGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigkKSB7XG4gIC8qIENoZWNrIHdpZHRoIG9uIHBhZ2UgbG9hZCovXG4gIGlmICggJCh3aW5kb3cpLndpZHRoKCkgPiA2ODApIHtcblx0XHRjbGFzc2llLnJlbW92ZSggYm9keSwgJ3NpZGViYXItcHVzaC10b2xlZnQnICk7XG5cblx0XHRzaG93UmlnaHRQdXNoLm9uY2xpY2sgPSBmdW5jdGlvbigpIHtcblx0XHRcdGNsYXNzaWUudG9nZ2xlKCBib2R5LCAnc2lkZWJhci1wdXNoLXRvbGVmdCcgKTtcblx0XHRcdGNsYXNzaWUudG9nZ2xlKCBzaWRlYmFyUmlnaHQsICdvcGVuJyApO1xuXHRcdFx0Y2xhc3NpZS50b2dnbGUoIHNob3dSaWdodFB1c2gsICdvcGVuJyk7XHRcdH1cblx0fVxuXG5cdGVsc2Uge1xuXHRcdGNsYXNzaWUucmVtb3ZlKCBib2R5LCAnc2lkZWJhci1wdXNoLXRvbGVmdCcgKTtcblxuXHRcdHNob3dSaWdodFB1c2gub25jbGljayA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y2xhc3NpZS50b2dnbGUoIGJvZHksICdzaWRlYmFyLXB1c2gtdG9sZWZ0JyApO1xuXHRcdFx0Y2xhc3NpZS50b2dnbGUoIHNpZGViYXJSaWdodCwgJ29wZW4nICk7XG5cdFx0XHRjbGFzc2llLnRvZ2dsZSggc2hvd1JpZ2h0UHVzaCwgJ29wZW4nKTtcblx0XHR9XG4gIH1cbn0pO1xuIiwiLyoqXG4gKiBGaWxlIHdpbmRvdy1yZWFkeS5qc1xuICpcbiAqIEFkZCBhIFwicmVhZHlcIiBjbGFzcyB0byA8Ym9keT4gd2hlbiB3aW5kb3cgaXMgcmVhZHkuXG4gKi9cbndpbmRvdy53ZHNXaW5kb3dSZWFkeSA9IHt9O1xuKCBmdW5jdGlvbiAoIHdpbmRvdywgJCwgYXBwICkge1xuXHQvLyBDb25zdHJ1Y3Rvci5cblx0YXBwLmluaXQgPSBmdW5jdGlvbiAoKSB7XG5cdFx0YXBwLmNhY2hlKCk7XG5cdFx0YXBwLmJpbmRFdmVudHMoKTtcblx0fTtcblxuXHQvLyBDYWNoZSBkb2N1bWVudCBlbGVtZW50cy5cblx0YXBwLmNhY2hlID0gZnVuY3Rpb24gKCkge1xuXHRcdGFwcC4kYyA9IHtcblx0XHRcdCd3aW5kb3cnOiAkKCB3aW5kb3cgKSxcblx0XHRcdCdib2R5JzogJCggZG9jdW1lbnQuYm9keSApXG5cdFx0fTtcblx0fTtcblxuXHQvLyBDb21iaW5lIGFsbCBldmVudHMuXG5cdGFwcC5iaW5kRXZlbnRzID0gZnVuY3Rpb24gKCkge1xuXHRcdGFwcC4kYy53aW5kb3cubG9hZCggYXBwLmFkZEJvZHlDbGFzcyApO1xuXHR9O1xuXG5cdC8vIEFkZCBhIGNsYXNzIHRvIDxib2R5Pi5cblx0YXBwLmFkZEJvZHlDbGFzcyA9IGZ1bmN0aW9uICgpIHtcblx0XHRhcHAuJGMuYm9keS5hZGRDbGFzcyggJ3JlYWR5JyApO1xuXHR9O1xuXG5cdC8vIEVuZ2FnZSFcblx0JCggYXBwLmluaXQgKTtcbn0gKSggd2luZG93LCBqUXVlcnksIHdpbmRvdy53ZHNXaW5kb3dSZWFkeSApO1xuIl19
